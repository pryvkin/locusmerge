### INSTALLING DEPENDENCIES
## samtools
git clone https://github.com/samtools/samtools -b standalone
cd samtools
make
cd ..
## bedtools
git clone https://github.com/arq5x/bedtools2
cd bedtools2
make 
sudo make install

## R packages:
# run R then run:
install.packages(c("igraph", "fastcluster"))
# and choose a repository if prompted

### BUILDING

make


### USAGE

## First, you need a genome annotation
# H. sapiens annotation:
./locusmerge_build_annot_hsa

# A. thaliana annotation:
./locusmerge_build_annot_ath

## 

## input file; must be sorted by chromosome and position
inputbam=in.bam

## output prefix - all output filenames will begin with this
mkdir -p data
prefix=data/out

## annotation options
annot=annot/hsa_ensembl.gtf
clsover=annot/curated/hsa_ensembl_class_overlaps.txt

##
# remove reads w/ > N mappings
echo "Removing reads with > ${loc_call_maxhits} hits..." >&2
./bam_filter_by_nh data/${inputbam} ${loc_call_maxhits} ${prefix}.bam

# convert to bedgraph
echo "Converting BAM to bedGraph..." >&2
./bam_to_bedgraph.sh ${prefix}.bam ${prefix}

# segment into loci, producing a BED file
echo "Segmenting transcriptome into loci (+)..." >&2
./call_loci ${prefix}.pos.bg \ 
  --threshold=${loc_call_threshold} --minrun=${loc_call_minrun} \
  --maxgap=${loc_call_maxgap} | \
  awk '{OFS="\t"; print $1,$2,$3,".",0,"+"}' > ${prefix}.pos.bed
echo "Segmenting transcriptome into loci (-)..." >&2
./call_loci ${prefix}.neg.bg | \
  --threshold=${loc_call_threshold} --minrun=${loc_call_minrun} \
  --maxgap=${loc_call_maxgap} | \
  awk '{OFS="\t"; print $1,$2,$3,".",0,"-"}' > ${prefix}.neg.bed

# merge per-strand bed files and generate locus IDs
echo "Merging per-strand locus BEDs into final BED..." >&2
cat ${prefix}.pos.bed ${prefix}.neg.bed | \
  sort -k1,1 -k2n,2n | \
  awk '{OFS="\t"; $4 = sprintf("L%09d",NR); print }' > ${prefix}.bed

# sort the bam file by name
# requires standalone devel version of samtools (0.1.19+)
echo "Sorting BAM by read name..." >&2
samtools sort -n -f -@ $ncpu ${prefix}.bam ${prefix}_byname.bam

# compute similarity scores between loci
echo "Computing similarity scores..." >&2
./locusmerge_compute_similarity ${prefix}_byname.bam ${prefix}.bed \
  ${loc_call_maxhits} > ${prefix}.sim

# compute coverage of loci
echo "Computing coverage..." >&2
bedtools coverage -s -counts -split -abam ${prefix}.bam -b ${prefix}.bed > \
  ${prefix}.cov

# compute uniq coverage of loci
echo "Computing unique coverage..." >&2
./bam_filter_by_nh ${prefix}.bam 1 /dev/stdout | \
  bedtools coverage -s -counts -split -abam - -b ${prefix}.bed > \
  ${prefix}.uniqcov

# produce locus annotation
echo "Annotating loci using genome annotation..." >&2
./annotate_loci ${prefix}.bed ${annot} ${prefix}.cov \
  ${prefix}.annot

# perform clustering
echo "Merging loci into clusters..." >&2
./locusmerge_cluster.R ${prefix}.sim ${prefix}.annot ${prefix}.cov \
  ${prefix}.uniqcov $clsover \
  ${prefix}.clusters

# select loci and reads per cluster
echo "Selecting representative loci..." >&2
./select_loci ${prefix}.bed ${prefix}.clusters
echo "Selecting reads mapping to representative loci..." >&2
./select_reads ${prefix}.bam ${prefix}.bed.clustered


###### OUTPUT

# reads that map to clustered loci
${prefix}.bamfile.bam.clustered

# clustered loci and information about each cluster
${prefix}.bed.clustered
${prefix}.clusters


